


// memoization 


/*class Solution{
public:	

int solve(int arr[],int n,vector<int>&dp){
 
 if(n==0)return arr[n];
 if(n<0)return 0;
 
 if(dp[n]!=-1)return dp[n];
 
 int left = solve(arr,n-2,dp)+arr[n];
 int right = solve(arr,n-1,dp);
 
 return dp[n]=max(left,right);

}


	int findMaxSum(int arr[], int n) {
	 vector<int>dp(n+1,-1);
	
	   return solve(arr,n-1,dp);
	   
	}
	
	
};


*/





//space optimization 

/*
class Solution{
public:	


int findMaxSum(int arr[], int n) {

int prev2=0;
int prev1=arr[0];

if(n==1)return arr[0];
int curr;

for(int i=1;i<n;i++){
   
    int taken = arr[i]+prev2;
    int not_taken=prev1;
    
     curr = max(taken,not_taken);
 
   prev2=prev1;
   prev1=curr;
   
    
}

return curr;

	   
	}
	
	
};

*/





//tabulation


/*
class Solution{
public:	


int findMaxSum(int arr[], int n) {

vector<int>dp(n,-1);

int prev2=0;
int prev1=arr[0];

dp[0]=arr[0];

if(dp[0]>arr[1])dp[1]=dp[0];
else dp[1]=arr[1];

if(n==1)return dp[0];

for(int i=2;i<n;i++){
  
  int take=arr[i]+dp[i-2];
  int ntake=dp[i-1];
  dp[i]=max(take,ntake);
   
}

return dp[n-1];
}

};

*/



